from flask import Flask, request, jsonify
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from flask_cors import CORS
from models import db, User, Project, ProjectMember, Invitation, Board, BoardList, Card, Label, CardLabel, CardAssignee, Checklist, ChecklistItem, Comment, UserRole
from config import Config
import uuid
from datetime import datetime, timedelta
import json
import os
from sqlalchemy import text 
from flask_cors import CORS

from models import (
    db, User, Project, ProjectMember, Invitation, 
    Board, BoardList, Card, Label, CardLabel, 
    CardAssignee, Checklist, ChecklistItem, Comment, UserRole
)

app = Flask(__name__)
app.config.from_object(Config)
CORS(app, 
     supports_credentials=True,
     origins=["http://localhost:3000", "http://127.0.0.1:3000", "http://172.17.64.1:3000"],
     methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
     allow_headers=["Content-Type", "Authorization"]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.init_app(app)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
with app.app_context():
    try:
        db.create_all()
        print("‚úÖ Database tables created successfully!")
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        inspector = db.inspect(db.engine)
        tables = inspector.get_table_names()
        print(f"üìã Created tables: {tables}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if User.query.count() == 0:
            print("üìù No users found, database is empty")
        else:
            print(f"üë• Found {User.query.count()} users in database")
            
    except Exception as e:
        print(f"‚ùå Error creating database: {e}")
        import traceback
        traceback.print_exc()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def has_project_access(project_id, required_role=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ–µ–∫—Ç—É"""
    membership = ProjectMember.query.filter_by(
        project_id=project_id, 
        user_id=current_user.id
    ).first()
    
    if not membership:
        return False
    
    if required_role:
        role_hierarchy = {UserRole.VIEWER: 1, UserRole.MEMBER: 2, UserRole.ADMIN: 3}
        user_role_level = role_hierarchy[membership.role]
        required_role_level = role_hierarchy[required_role]
        return user_role_level >= required_role_level
    
    return True

@app.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        response = jsonify({'status': 'preflight'})
        response.headers.add('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        return response
    
# API Routes

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
@app.route('/api/register', methods=['POST'])
def register():
    try:
        data = request.get_json()
        print(f"üìù Registration attempt for: {data['username']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = User.query.filter_by(username=data['username']).first()
        if existing_user:
            print("‚ùå Username already exists")
            return jsonify({'error': 'Username already exists'}), 400
        
        existing_email = User.query.filter_by(email=data['email']).first()
        if existing_email:
            print("‚ùå Email already exists")
            return jsonify({'error': 'Email already exists'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            username=data['username'],
            email=data['email']
        )
        user.set_password(data['password'])
        
        db.session.add(user)
        db.session.commit()
        
        print(f"‚úÖ User {user.username} created successfully")
        login_user(user)
        return jsonify(user.to_dict())
        
    except Exception as e:
        print(f"‚ùå Registration error: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Internal server error', 'details': str(e)}), 500

@app.route('/api/login', methods=['POST'])
def login():
    try:
        data = request.get_json()
        print(f"üîê Login attempt for: {data['username']}")
        
        user = User.query.filter_by(username=data['username']).first()
        
        if user and user.check_password(data['password']):
            login_user(user)
            print(f"‚úÖ User {user.username} logged in successfully")
            return jsonify(user.to_dict())
        
        print("‚ùå Invalid credentials")
        return jsonify({'error': 'Invalid credentials'}), 401
        
    except Exception as e:
        print(f"‚ùå Login error: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/logout', methods=['POST'])
@login_required
def logout():
    logout_user()
    return jsonify({'message': 'Logged out successfully'})

@app.route('/api/user')
@login_required
def get_current_user():
    return jsonify(current_user.to_dict())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
@app.route('/api/health')
def health_check():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å text()
        db.session.execute(text('SELECT 1'))
        return jsonify({
            'status': 'healthy',
            'database': 'connected',
            'timestamp': datetime.utcnow().isoformat()
        })
    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'database': 'disconnected',
            'error': str(e)
        }), 500

# Projects endpoints
@app.route('/api/projects', methods=['GET'])
@login_required
def get_projects():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        memberships = ProjectMember.query.filter_by(user_id=current_user.id).all()
        projects = [membership.project.to_dict() for membership in memberships]
        
        return jsonify(projects)
    except Exception as e:
        print(f"‚ùå Error getting projects: {str(e)}")
        return jsonify({'error': 'Failed to get projects'}), 500

@app.route('/api/projects', methods=['POST'])
@login_required
def create_project():
    try:
        data = request.get_json()
        print(f"üìù Creating project: {data['name']}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        project = Project(
            name=data['name'],
            description=data.get('description', ''),
            creator_id=current_user.id
        )
        
        db.session.add(project)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ –∫–æ–º–º–∏—Ç–∞
        
        print(f"üìä Project created with ID: {project.id}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º project_id –≤–º–µ—Å—Ç–æ project
        board = Board(
            name=f"{data['name']} Board",
            description=data.get('description', ''),
            project_id=project.id  # –ò–°–ü–†–ê–í–õ–ï–ù–û: project_id –≤–º–µ—Å—Ç–æ project
        )
        
        db.session.add(board)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ—Å–∫–∏ –¥–æ –∫–æ–º–º–∏—Ç–∞
        
        print(f"üìã Board created with ID: {board.id}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –¥–æ—Å–∫–∏
        default_lists = ['To Do', 'In Progress', 'Done']
        for i, list_name in enumerate(default_lists):
            board_list = BoardList(
                name=list_name,
                position=i,
                board_id=board.id  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º board_id
            )
            db.session.add(board_list)
            print(f"‚úÖ Created list: {list_name} for board {board.id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        membership = ProjectMember(
            project_id=project.id,
            user_id=current_user.id,
            role=UserRole.ADMIN
        )
        db.session.add(membership)
        
        db.session.commit()
        
        print(f"‚úÖ Project {project.name} created successfully with single board")
        return jsonify(project.to_dict())
        
    except Exception as e:
        print(f"‚ùå Error creating project: {str(e)}")
        import traceback
        traceback.print_exc()
        db.session.rollback()
        return jsonify({'error': 'Failed to create project', 'details': str(e)}), 500

# Invitations endpoints
@app.route('/api/invitations', methods=['GET'])
@login_required
def get_invitations():
    try:
        invitations = Invitation.query.filter_by(
            invited_user_id=current_user.id,
            status='pending'
        ).all()
        
        return jsonify([invitation.to_dict() for invitation in invitations])
    except Exception as e:
        print(f"‚ùå Error getting invitations: {str(e)}")
        return jsonify({'error': 'Failed to get invitations'}), 500

# Boards endpoints
@app.route('/api/projects/<int:project_id>/boards', methods=['POST'])
@login_required
def create_board(project_id):
    try:
        if not has_project_access(project_id, UserRole.MEMBER):
            return jsonify({'error': 'Insufficient permissions'}), 403
        
        data = request.get_json()
        
        board = Board(
            name=data['name'],
            description=data.get('description', ''),
            project_id=project_id
        )
        
        db.session.add(board)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        default_lists = ['To Do', 'In Progress', 'Done']
        for i, list_name in enumerate(default_lists):
            board_list = BoardList(
                name=list_name,
                position=i,
                board=board
            )
            db.session.add(board_list)
        
        db.session.commit()
        
        return jsonify(board.to_dict())
        
    except Exception as e:
        print(f"‚ùå Error creating board: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Failed to create board'}), 500

# Projects endpoints
@app.route('/api/projects/<int:project_id>')
@login_required
def get_project(project_id):
    try:
        if not has_project_access(project_id):
            return jsonify({'error': 'Access denied'}), 403
        
        project = Project.query.get_or_404(project_id)
        return jsonify(project.to_dict())
    except Exception as e:
        print(f"‚ùå Error getting project: {str(e)}")
        return jsonify({'error': 'Failed to get project'}), 500

@app.route('/api/projects/<int:project_id>/members')
@login_required
def get_project_members(project_id):
    try:
        if not has_project_access(project_id):
            return jsonify({'error': 'Access denied'}), 403
        
        members = ProjectMember.query.filter_by(project_id=project_id).all()
        return jsonify([member.to_dict() for member in members])
    except Exception as e:
        print(f"‚ùå Error getting project members: {str(e)}")
        return jsonify({'error': 'Failed to get project members'}), 500

# Boards endpoints
@app.route('/api/boards/<int:board_id>')
@login_required
def get_board(board_id):
    try:
        board = Board.query.get_or_404(board_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–æ—Å–∫–∏
        if not has_project_access(board.project_id):
            return jsonify({'error': 'Access denied'}), 403
        
        return jsonify(board.to_dict())
    except Exception as e:
        print(f"‚ùå Error getting board: {str(e)}")
        return jsonify({'error': 'Failed to get board'}), 500

@app.route('/api/projects/<int:project_id>/boards')
@login_required
def get_project_boards(project_id):
    try:
        if not has_project_access(project_id):
            return jsonify({'error': 'Access denied'}), 403
        
        project = Project.query.get_or_404(project_id)
        boards = Board.query.filter_by(project_id=project_id).all()
        
        return jsonify([board.to_dict() for board in boards])
    except Exception as e:
        print(f"‚ùå Error getting project boards: {str(e)}")
        return jsonify({'error': 'Failed to get project boards'}), 500

@app.route('/api/users')
@login_required
def get_users():
    try:
        users = User.query.all()
        return jsonify([user.to_dict() for user in users])
    except Exception as e:
        print(f"‚ùå Error getting users: {str(e)}")
        return jsonify({'error': 'Failed to get users'}), 500
    
# Lists endpoints
@app.route('/api/lists/<int:list_id>/cards', methods=['POST'])
@login_required
def create_card(list_id):
    try:
        board_list = BoardList.query.get_or_404(list_id)
        
        if not has_project_access(board_list.board.project_id, UserRole.MEMBER):
            return jsonify({'error': 'Insufficient permissions'}), 403
        
        data = request.get_json()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
        max_position = db.session.query(db.func.max(Card.position)).filter_by(list_id=list_id).scalar() or 0
        
        card = Card(
            title=data['title'],
            description=data.get('description', ''),
            position=max_position + 1,
            list_id=list_id,
            created_by_id=current_user.id
        )
        
        if data.get('due_date'):
            card.due_date = datetime.fromisoformat(data['due_date'])
        
        db.session.add(card)
        db.session.commit()
        
        return jsonify(card.to_dict())
        
    except Exception as e:
        print(f"‚ùå Error creating card: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Failed to create card'}), 500

# Cards endpoints
@app.route('/api/cards/<int:card_id>', methods=['PUT'])
@login_required
def update_card(card_id):
    try:
        card = Card.query.get_or_404(card_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É –∫–∞—Ä—Ç–æ—á–∫–∏
        if not has_project_access(card.list.board.project_id, UserRole.MEMBER):
            return jsonify({'error': 'Insufficient permissions'}), 403
        
        data = request.get_json()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        if 'title' in data:
            card.title = data['title']
        if 'description' in data:
            card.description = data['description']
        if 'due_date' in data and data['due_date']:
            card.due_date = datetime.fromisoformat(data['due_date'])
        if 'list_id' in data:
            card.list_id = data['list_id']
        if 'position' in data:
            card.position = data['position']
        
        card.updated_at = datetime.utcnow()
        db.session.commit()
        
        return jsonify(card.to_dict())
        
    except Exception as e:
        print(f"‚ùå Error updating card: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Failed to update card'}), 500
    
@app.route('/api/cards/<int:card_id>')
@login_required
def get_card(card_id):
    try:
        card = Card.query.get_or_404(card_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É –∫–∞—Ä—Ç–æ—á–∫–∏
        if not has_project_access(card.list.board.project_id):
            return jsonify({'error': 'Access denied'}), 403
        
        return jsonify(card.to_dict())
    except Exception as e:
        print(f"‚ùå Error getting card: {str(e)}")
        return jsonify({'error': 'Failed to get card'}), 500

# Comments endpoints
@app.route('/api/cards/<int:card_id>/comments', methods=['POST'])
@login_required
def add_comment(card_id):
    try:
        card = Card.query.get_or_404(card_id)
        
        if not has_project_access(card.list.board.project_id, UserRole.MEMBER):
            return jsonify({'error': 'Insufficient permissions'}), 403
        
        data = request.get_json()
        
        comment = Comment(
            text=data['text'],
            card_id=card_id,
            author_id=current_user.id
        )
        
        db.session.add(comment)
        db.session.commit()
        
        return jsonify(comment.to_dict())
        
    except Exception as e:
        print(f"‚ùå Error adding comment: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Failed to add comment'}), 500

# Assignees endpoints
@app.route('/api/cards/<int:card_id>/assignees', methods=['POST'])
@login_required
def assign_user_to_card(card_id):
    try:
        card = Card.query.get_or_404(card_id)
        
        if not has_project_access(card.list.board.project_id, UserRole.MEMBER):
            return jsonify({'error': 'Insufficient permissions'}), 403
        
        data = request.get_json()
        user = User.query.get_or_404(data['user_id'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞
        if not ProjectMember.query.filter_by(project_id=card.list.board.project_id, user_id=user.id).first():
            return jsonify({'error': 'User is not a project member'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_assignee = CardAssignee.query.filter_by(card_id=card_id, user_id=user.id).first()
        if existing_assignee:
            return jsonify({'error': 'User already assigned to this card'}), 400
        
        assignee = CardAssignee(card_id=card_id, user_id=user.id)
        db.session.add(assignee)
        db.session.commit()
        
        return jsonify({'message': 'User assigned successfully'})
        
    except Exception as e:
        print(f"‚ùå Error assigning user: {str(e)}")
        db.session.rollback()
        return jsonify({'error': 'Failed to assign user'}), 500

# Debug endpoint to list all available routes
@app.route('/api/debug/routes')
def debug_routes():
    routes = []
    for rule in app.url_map.iter_rules():
        if rule.endpoint != 'static':
            routes.append({
                'endpoint': rule.endpoint,
                'methods': list(rule.methods),
                'path': str(rule)
            })
    return jsonify(sorted(routes, key=lambda x: x['path']))

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    print("üöÄ Starting Jira Analog Backend...")
    print(f"üìä Database: {app.config['SQLALCHEMY_DATABASE_URI']}")
    app.run(debug=True, host='0.0.0.0', port=5000)