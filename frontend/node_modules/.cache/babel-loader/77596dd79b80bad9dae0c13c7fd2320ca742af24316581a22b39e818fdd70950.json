{"ast":null,"code":"const API_URL = 'http://localhost:5000/api';\nexport async function register(username, password) {\n  const res = await fetch(`${API_URL}/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  return res.json();\n}\nexport async function login(username, password) {\n  const res = await fetch(`${API_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    }),\n    credentials: 'include'\n  });\n  return res.json();\n}\nexport async function getProjects() {\n  const res = await fetch(`${API_URL}/projects`, {\n    credentials: 'include'\n  });\n  return res.json();\n}\nexport async function createProject(name) {\n  const res = await fetch(`${API_URL}/projects/create`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name\n    }),\n    credentials: 'include'\n  });\n  return res.json();\n}\n// Boards\nexport async function getBoards(projectId) {\n  const res = await fetch(`${API_URL}/projects/${projectId}/boards`, {\n    credentials: 'include'\n  });\n  return res.json();\n}\nexport async function createBoard(projectId, name) {\n  const res = await fetch(`${API_URL}/projects/${projectId}/boards/create`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name\n    }),\n    credentials: 'include'\n  });\n  return res.json();\n}\n\n// Lists\nexport async function getLists(boardId) {\n  const res = await fetch(`${API_URL}/boards/${boardId}/lists`, {\n    credentials: 'include'\n  });\n  return res.json();\n}\nexport async function createList(boardId, name) {\n  const res = await fetch(`${API_URL}/boards/${boardId}/lists/create`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name\n    }),\n    credentials: 'include'\n  });\n  return res.json();\n}\n\n// Cards\nexport async function createCard(listId, title) {\n  const res = await fetch(`${API_URL}/lists/${listId}/cards/create`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      title\n    }),\n    credentials: 'include'\n  });\n  return res.json();\n}\n\n// TODO: boards, lists, cards, comments, labels","map":{"version":3,"names":["API_URL","register","username","password","res","fetch","method","headers","body","JSON","stringify","json","login","credentials","getProjects","createProject","name","getBoards","projectId","createBoard","getLists","boardId","createList","createCard","listId","title"],"sources":["C:/Users/Lenovo/Desktop/AnalogueJiras/frontend/src/api.js"],"sourcesContent":["const API_URL = 'http://localhost:5000/api';\r\n\r\nexport async function register(username, password) {\r\n    const res = await fetch(`${API_URL}/auth/register`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({username, password})\r\n    });\r\n    return res.json();\r\n}\r\n\r\nexport async function login(username, password) {\r\n    const res = await fetch(`${API_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({username, password}),\r\n        credentials: 'include'\r\n    });\r\n    return res.json();\r\n}\r\n\r\nexport async function getProjects() {\r\n    const res = await fetch(`${API_URL}/projects`, {credentials: 'include'});\r\n    return res.json();\r\n}\r\n\r\nexport async function createProject(name) {\r\n    const res = await fetch(`${API_URL}/projects/create`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({name}),\r\n        credentials: 'include'\r\n    });\r\n    return res.json();\r\n}\r\n// Boards\r\nexport async function getBoards(projectId) {\r\n    const res = await fetch(`${API_URL}/projects/${projectId}/boards`, {credentials: 'include'});\r\n    return res.json();\r\n}\r\n\r\nexport async function createBoard(projectId, name) {\r\n    const res = await fetch(`${API_URL}/projects/${projectId}/boards/create`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({name}),\r\n        credentials: 'include'\r\n    });\r\n    return res.json();\r\n}\r\n\r\n// Lists\r\nexport async function getLists(boardId) {\r\n    const res = await fetch(`${API_URL}/boards/${boardId}/lists`, {credentials: 'include'});\r\n    return res.json();\r\n}\r\n\r\nexport async function createList(boardId, name) {\r\n    const res = await fetch(`${API_URL}/boards/${boardId}/lists/create`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({name}),\r\n        credentials: 'include'\r\n    });\r\n    return res.json();\r\n}\r\n\r\n// Cards\r\nexport async function createCard(listId, title) {\r\n    const res = await fetch(`${API_URL}/lists/${listId}/cards/create`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({title}),\r\n        credentials: 'include'\r\n    });\r\n    return res.json();\r\n}\r\n\r\n// TODO: boards, lists, cards, comments, labels\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}