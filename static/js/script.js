// Main functionality
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM loaded, initializing app...');
    
    initializeDirectDeleteHandlers();
    initializeDashboardFunctionality();
    initializeDragAndDrop();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    setTimeout(() => {
        console.log('üîÑ Initializing modals...');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–µ—Ç–æ–∫ –≤ DOM
        const labelModal = document.getElementById('label-modal');
        console.log('Label modal element found:', !!labelModal);
        
        if (labelModal) {
            console.log('Label modal HTML:', labelModal.outerHTML);
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å label modal
        try {
            const labelModalSuccess = initializeLabelModal();
            console.log('Label modal initialization:', labelModalSuccess ? 'SUCCESS' : 'FAILED');
        } catch (error) {
            console.error('‚ùå Error initializing label modal:', error);
        }
    }, 200);
    
    console.log('‚úÖ App initialization completed');
    
    // Close modal when clicking outside
    window.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            closeAllModals();
        }
    });
});

function initializeDirectDeleteHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    document.querySelectorAll('.delete-card-btn').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const cardId = this.getAttribute('data-card-id');
            console.log('Direct handler - Delete card:', cardId);
            deleteCard(cardId);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
    document.querySelectorAll('.delete-list-btn').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const listId = this.getAttribute('data-list-id');
            console.log('Direct handler - Delete list:', listId);
            deleteList(listId);
        });
    });
}


function closeAllModals() {
    document.querySelectorAll('.modal').forEach(modal => {
        modal.style.display = 'none';
    });
}

function initializeDashboardFunctionality() {
    // List creation
    const addListBtn = document.getElementById('add-list-btn');
    const listModal = document.getElementById('list-modal');
    const cancelList = document.getElementById('cancel-list');
    const listForm = document.getElementById('list-form');
    const listNameInput = document.getElementById('list-name');
    
    if (addListBtn) {
        addListBtn.addEventListener('click', function() {
            listNameInput.value = '';
            listModal.style.display = 'flex';
            listNameInput.focus();
        });
    }
    
    if (cancelList) {
        cancelList.addEventListener('click', function() {
            listModal.style.display = 'none';
            listNameInput.value = '';
        });
    }
    
    if (listForm) {
        listForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const listName = listNameInput.value.trim();
            if (listName) {
                fetch('/api/lists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: listName
                    })
                })
                .then(response => response.json())
                .then(data => {
                    listNameInput.value = '';
                    listModal.style.display = 'none';
                    location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
                })
                .catch(error => {
                    console.error('Error creating list:', error);
                });
            }
        });
        setTimeout(() => {
    reinitializeDragAndDrop();
}, 500);
    }
    
    // Card creation
    const addCardBtns = document.querySelectorAll('.add-card-btn, .add-card-text-btn');
    const cardDetailModal = document.getElementById('card-detail-modal');
    const cancelCardDetail = document.getElementById('cancel-card-detail');
    const cardDetailForm = document.getElementById('card-detail-form');
    
    addCardBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const listId = this.getAttribute('data-list-id');
            openCardDetailModal(null, listId);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('edit-card-btn')) {
            e.stopPropagation();
            const cardId = e.target.getAttribute('data-card-id');
            openCardDetailModal(cardId);
        }
        
        if (e.target.classList.contains('card')) {
            const cardId = e.target.closest('.card').getAttribute('data-card-id');
            openCardDetailModal(cardId);
        }
    });
    
    if (cancelCardDetail) {
        cancelCardDetail.addEventListener('click', function() {
            cardDetailModal.style.display = 'none';
        });
    }
    
    if (cardDetailForm) {
        cardDetailForm.addEventListener('submit', function(e) {
            e.preventDefault();
            saveCardDetails();
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    initializeCardDetailFunctionality();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    // initializeDeleteHandlers(); // <-- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ß–ö–£
}

function openCardDetailModal(cardId = null, listId = null) {
    const modal = document.getElementById('card-detail-modal');
    const title = document.getElementById('card-modal-title');
    const cardDetailId = document.getElementById('card-detail-id');
    const cardDetailListId = document.getElementById('card-detail-list-id');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    const additionalSections = document.querySelectorAll('.right-column, .form-section');
    
    if (cardId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        title.textContent = 'Edit Card';
        cardDetailId.value = cardId;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        additionalSections.forEach(section => section.style.display = 'block');
        loadCardDetails(cardId);
    } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        title.textContent = 'Create New Card';
        cardDetailId.value = '';
        cardDetailListId.value = listId;
        // –°–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        additionalSections.forEach(section => section.style.display = 'none');
        resetCardDetailForm();
        loadUsersAndLabels(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –º–µ—Ç–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    }
    
    modal.style.display = 'flex';
}

function loadCardDetails(cardId) {
    console.log('Loading card details for ID:', cardId);
    
    fetch(`/api/cards/${cardId}`)
        .then(response => {
            console.log('Response status:', response.status);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(card => {
            console.log('Card data received:', card);
            
            document.getElementById('card-detail-title').value = card.title;
            document.getElementById('card-detail-description').value = card.description || '';
            document.getElementById('card-detail-list-id').value = card.list_id;
            
            if (card.due_date) {
                const dueDate = new Date(card.due_date);
                const localDateTime = dueDate.toISOString().slice(0, 16);
                document.getElementById('card-detail-due-date').value = localDateTime;
            } else {
                document.getElementById('card-detail-due-date').value = '';
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            loadCardAssignees(card);
            loadCardLabels(card);
            loadCardChecklists(card);
            loadCardComments(card); // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            loadUsersAndLabels();
        })
        .catch(error => {
            console.error('Error loading card details:', error);
            alert('Error loading card details: ' + error.message);
        });
}

function resetCardDetailForm() {
    document.getElementById('card-detail-title').value = '';
    document.getElementById('card-detail-description').value = '';
    document.getElementById('card-detail-due-date').value = '';
    document.getElementById('assignees-container').innerHTML = '';
    document.getElementById('labels-container').innerHTML = '';
    document.getElementById('checklists-container').innerHTML = '';
    document.getElementById('comments-container').innerHTML = '';
    document.getElementById('new-comment-text').value = '';
}

function saveCardDetails() {
    const cardId = document.getElementById('card-detail-id').value;
    const listId = document.getElementById('card-detail-list-id').value;
    const title = document.getElementById('card-detail-title').value.trim();
    const description = document.getElementById('card-detail-description').value;
    const dueDate = document.getElementById('card-detail-due-date').value;
    
    if (!title) {
        alert('Title is required');
        return;
    }
    
    const url = cardId ? `/api/cards/${cardId}` : `/api/lists/${listId}/cards`;
    const method = cardId ? 'PUT' : 'POST';
    
    fetch(url, {
        method: method,
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            title: title,
            description: description,
            due_date: dueDate || null
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to save card');
        }
        return response.json();
    })
    .then(data => {
        document.getElementById('card-detail-modal').style.display = 'none';
        
        if (cardId) {
            updateCardOnDashboard(cardId);
        } else {
            // –î–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            location.reload();
        }
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag & drop
        setTimeout(reinitializeDragAndDrop, 100);
    })
    .catch(error => {
        console.error('Error saving card:', error);
        alert('Error saving card');
    });
}

function reinitializeDragAndDrop() {
    console.log('üîÑ Reinitializing enhanced drag and drop...');
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    document.querySelectorAll('.drop-indicator').forEach(indicator => {
        indicator.remove();
    });
    
    // –°–Ω–∏–º–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã drag-over
    document.querySelectorAll('.drag-over').forEach(el => {
        el.classList.remove('drag-over');
    });
    
    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    initializeDragAndDrop();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
function updateCardOnDashboard(cardId) {
    fetch(`/api/cards/${cardId}`)
        .then(response => response.json())
        .then(card => {
            // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
            const cardElement = document.querySelector(`.card[data-card-id="${cardId}"]`);
            if (cardElement) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                const titleElement = cardElement.querySelector('.card-content h4');
                if (titleElement) {
                    titleElement.textContent = card.title;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                const descriptionElement = cardElement.querySelector('.card-content p');
                if (descriptionElement) {
                    descriptionElement.textContent = card.description || '';
                } else if (card.description) {
                    // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–æ, –Ω–æ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å - —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
                    const contentDiv = cardElement.querySelector('.card-content');
                    const p = document.createElement('p');
                    p.textContent = card.description;
                    contentDiv.appendChild(p);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
                const labelsContainer = cardElement.querySelector('.card-labels');
                labelsContainer.innerHTML = '';
                if (card.labels && card.labels.length > 0) {
                    card.labels.forEach(label => {
                        const labelSpan = document.createElement('span');
                        labelSpan.className = 'card-label';
                        labelSpan.style.backgroundColor = label.color;
                        labelSpan.title = label.name;
                        labelsContainer.appendChild(labelSpan);
                    });
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±—ç–π–¥–∂–∏
                updateCardBadges(cardElement, card);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const assigneesContainer = cardElement.querySelector('.card-assignees');
                assigneesContainer.innerHTML = '';
                if (card.assignees && card.assignees.length > 0) {
                    card.assignees.forEach(assignee => {
                        const assigneeSpan = document.createElement('span');
                        assigneeSpan.className = 'assignee-avatar';
                        assigneeSpan.title = assignee.username;
                        assigneeSpan.textContent = assignee.username[0].toUpperCase();
                        assigneesContainer.appendChild(assigneeSpan);
                    });
                }
            }
        })
        .catch(error => {
            console.error('Error updating card on dashboard:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            location.reload();
        });
}

function updateCardBadges(cardElement, card) {
    const badgesContainer = cardElement.querySelector('.card-badges');
    badgesContainer.innerHTML = '';
    
    // –ë—ç–¥–∂ —Å—Ä–æ–∫–∞
    if (card.due_date) {
        const dueDate = new Date(card.due_date);
        const now = new Date();
        const dueBadge = document.createElement('span');
        dueBadge.className = `badge due-date ${dueDate < now ? 'overdue' : ''}`;
        dueBadge.innerHTML = `üìÖ ${dueDate.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}`;
        badgesContainer.appendChild(dueBadge);
    }
    
    // –ë—ç–¥–∂ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö
    if (card.assignees && card.assignees.length > 0) {
        const assigneesBadge = document.createElement('span');
        assigneesBadge.className = 'badge assignees';
        assigneesBadge.innerHTML = `üë• ${card.assignees.length}`;
        badgesContainer.appendChild(assigneesBadge);
    }
    
    // –ë—ç–¥–∂ —á–µ–∫-–ª–∏—Å—Ç–æ–≤
    if (card.checklists && card.checklists.length > 0) {
        let totalItems = 0;
        let completedItems = 0;
        
        card.checklists.forEach(checklist => {
            totalItems += checklist.items.length;
            completedItems += checklist.items.filter(item => item.completed).length;
        });
        
        const checklistBadge = document.createElement('span');
        checklistBadge.className = 'badge checklist';
        checklistBadge.innerHTML = `‚úÖ ${completedItems}/${totalItems}`;
        badgesContainer.appendChild(checklistBadge);
    }
    
    // –ë—ç–¥–∂ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if (card.comments && card.comments.length > 0) {
        const commentsBadge = document.createElement('span');
        commentsBadge.className = 'badge comments';
        commentsBadge.innerHTML = `üí¨ ${card.comments.length}`;
        badgesContainer.appendChild(commentsBadge);
    }
}

function initializeCardDetailFunctionality() {
    console.log('üîÑ Initializing card detail functionality...');
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const addAssigneeBtn = document.getElementById('add-assignee-btn');
    if (addAssigneeBtn) {
        addAssigneeBtn.addEventListener('click', function() {
            const select = document.getElementById('assignee-select');
            const userId = select.value;
            const cardId = document.getElementById('card-detail-id').value;
            
            if (!cardId) {
                alert('Please save the card first before adding assignees');
                return;
            }
            
            if (userId && cardId) {
                fetch(`/api/cards/${cardId}/assignees`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        user_id: userId
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to assign user');
                    }
                    return response.json();
                })
                .then(() => {
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
                    loadCardDetails(cardId);
                    select.value = '';
                })
                .catch(error => {
                    console.error('Error assigning user:', error);
                    alert('Error assigning user');
                });
            }
        });
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    const assigneesContainer = document.getElementById('assignees-container');
    if (assigneesContainer) {
        assigneesContainer.addEventListener('click', function(e) {
            if (e.target.classList.contains('remove-assignee')) {
                const cardId = document.getElementById('card-detail-id').value;
                const userId = e.target.getAttribute('data-user-id');
                
                if (!cardId) {
                    alert('Card not saved yet');
                    return;
                }
                
                fetch(`/api/cards/${cardId}/assignees/${userId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to remove assignee');
                    }
                    return response.json();
                })
                .then(() => {
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    loadCardDetails(cardId);
                })
                .catch(error => {
                    console.error('Error removing assignee:', error);
                    alert('Error removing assignee');
                });
            }
        });
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏
    const addLabelBtn = document.getElementById('add-label-btn');
    if (addLabelBtn) {
        addLabelBtn.addEventListener('click', function() {
            const select = document.getElementById('label-select');
            const labelId = select.value;
            const cardId = document.getElementById('card-detail-id').value;
            
            if (!cardId) {
                alert('Please save the card first before adding labels');
                return;
            }
            
            if (labelId && cardId) {
                fetch(`/api/cards/${cardId}/labels`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        label_id: labelId
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to add label');
                    }
                    return response.json();
                })
                .then(() => {
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    loadCardDetails(cardId);
                    select.value = '';
                })
                .catch(error => {
                    console.error('Error adding label:', error);
                    alert('Error adding label');
                });
            }
        });
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏
    const labelsContainer = document.getElementById('labels-container');
    if (labelsContainer) {
        labelsContainer.addEventListener('click', function(e) {
            if (e.target.classList.contains('remove-label')) {
                const cardId = document.getElementById('card-detail-id').value;
                const labelId = e.target.getAttribute('data-label-id');
                
                if (!cardId) {
                    alert('Card not saved yet');
                    return;
                }
                
                fetch(`/api/cards/${cardId}/labels/${labelId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to remove label');
                    }
                    return response.json();
                })
                .then(() => {
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    loadCardDetails(cardId);
                })
                .catch(error => {
                    console.error('Error removing label:', error);
                    alert('Error removing label');
                });
            }
        });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–µ—Ç–∫–∏
const createLabelBtn = document.getElementById('create-label-btn');
if (createLabelBtn) {
    createLabelBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('üé® Opening label creation modal');
        
        const modal = document.getElementById('label-modal');
        if (modal) {
            console.log('‚úÖ Label modal found, displaying it');
            modal.style.display = 'flex';
            
            // –°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            const nameInput = document.getElementById('label-name');
            if (nameInput) {
                nameInput.focus();
            }
        } else {
            console.error('‚ùå Label modal not found in DOM');
        }
    });
} else {
    console.error('‚ùå Create label button not found');
}
    
    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const addCommentBtn = document.getElementById('add-comment-btn');
    if (addCommentBtn) {
        addCommentBtn.addEventListener('click', function() {
            const cardId = document.getElementById('card-detail-id').value;
            const text = document.getElementById('new-comment-text').value.trim();
            
            if (!cardId) {
                alert('Please save the card first before adding comments');
                return;
            }
            
            if (text && cardId) {
                fetch(`/api/cards/${cardId}/comments`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        text: text
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to add comment');
                    }
                    return response.json();
                })
                .then(() => {
                    loadCardCommentsFromAPI(cardId);
                    document.getElementById('new-comment-text').value = '';
                })
                .catch(error => {
                    console.error('Error adding comment:', error);
                    alert('Error adding comment');
                });
            }
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è –º–µ—Ç–æ–∫ –∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤
    initializeChecklistEventHandlers();
    initializeChecklistModal(); // –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–∞
    
    console.log('‚úÖ Card detail functionality initialized');
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function loadCardComments(card) {
    const container = document.getElementById('comments-container');
    container.innerHTML = '';
    
    if (card.comments && card.comments.length > 0) {
        card.comments.forEach(comment => {
            const commentEl = document.createElement('div');
            commentEl.className = 'comment-item';
            const date = new Date(comment.created_at).toLocaleString();
            commentEl.innerHTML = `
                <div class="comment-author">${comment.user ? comment.user.username : 'Unknown'}</div>
                <div class="comment-text">${comment.text}</div>
                <div class="comment-date">${date}</div>
            `;
            container.appendChild(commentEl);
        });
    } else {
        container.innerHTML = '<div class="no-data">No comments</div>';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ API (–æ—Ç–¥–µ–ª—å–Ω–æ)
function loadCardCommentsFromAPI(cardId) {
    fetch(`/api/cards/${cardId}`)
        .then(response => response.json())
        .then(card => {
            loadCardComments(card);
        })
        .catch(error => {
            console.error('Error loading comments:', error);
        });
}


// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
function loadUsersAndLabels() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    fetch('/api/users')
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to load users');
            }
            return response.json();
        })
        .then(users => {
            const select = document.getElementById('assignee-select');
            select.innerHTML = '<option value="">Select user to assign...</option>';
            users.forEach(user => {
                const option = document.createElement('option');
                option.value = user.id;
                option.textContent = user.username;
                select.appendChild(option);
            });
        })
        .catch(error => {
            console.error('Error loading users:', error);
        });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∫–∏
    fetch('/api/labels')
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to load labels');
            }
            return response.json();
        })
        .then(labels => {
            const select = document.getElementById('label-select');
            select.innerHTML = '<option value="">Select label...</option>';
            labels.forEach(label => {
                const option = document.createElement('option');
                option.value = label.id;
                option.textContent = label.name;
                select.appendChild(option);
            });
        })
        .catch(error => {
            console.error('Error loading labels:', error);
        });
}

function loadCardAssignees(card) {
    const container = document.getElementById('assignees-container');
    container.innerHTML = '';
    
    if (card.assignees && card.assignees.length > 0) {
        card.assignees.forEach(assignee => {
            const assigneeEl = document.createElement('div');
            assigneeEl.className = 'assignee-item';
            assigneeEl.innerHTML = `
                ${assignee.username}
                <button type="button" class="remove-assignee" data-user-id="${assignee.id}">√ó</button>
            `;
            container.appendChild(assigneeEl);
        });
    } else {
        container.innerHTML = '<div class="no-data">No assignees</div>';
    }
}

function loadCardLabels(card) {
    const container = document.getElementById('labels-container');
    container.innerHTML = '';
    
    if (card.labels && card.labels.length > 0) {
        card.labels.forEach(label => {
            const labelEl = document.createElement('div');
            labelEl.className = 'label-item';
            labelEl.style.backgroundColor = label.color;
            labelEl.innerHTML = `
                ${label.name}
                <button type="button" class="remove-label" data-label-id="${label.id}">√ó</button>
            `;
            container.appendChild(labelEl);
        });
    } else {
        container.innerHTML = '<div class="no-data">No labels</div>';
    }
}

function loadCardChecklists(card) {
    const container = document.getElementById('checklists-container');
    const actionsContainer = document.getElementById('checklist-actions-container');
    
    container.innerHTML = '';
    actionsContainer.innerHTML = '';

    if (card.checklists && card.checklists.length > 0) {
        const checklist = card.checklists[0];
        
        const checklistEl = document.createElement('div');
        checklistEl.className = 'checklist';
        
        let itemsHTML = '';
        if (checklist.items && checklist.items.length > 0) {
            checklist.items.forEach(item => {
                // –£–ë–ï–î–ò–¢–ï–°–¨, —á—Ç–æ data-item-id —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                itemsHTML += `
                    <div class="checklist-item ${item.completed ? 'completed' : ''}">
                        <input type="checkbox" 
                               data-item-id="${item.id}"
                               ${item.completed ? 'checked' : ''}
                               onchange="updateChecklistItem(${item.id}, this.checked)">
                        <span class="checklist-item-text">${item.text}</span>
                        <div class="checklist-item-actions">
                            <button type="button" class="remove-checklist-item" 
                                    onclick="deleteChecklistItem(${item.id})">√ó</button>
                        </div>
                    </div>
                `;
            });
        }
        
        checklistEl.innerHTML = `
            <div class="checklist-header">
                <h4>${checklist.title}</h4>
                ${checklist.items && checklist.items.length > 0 ? 
                    `<button type="button" class="delete-checklist btn btn-secondary btn-sm" 
                            onclick="deleteChecklist(${checklist.id})">Delete All</button>` : 
                    ''
                }
            </div>
            <div class="checklist-items">
                ${itemsHTML || '<div class="no-data">No items yet</div>'}
            </div>
        `;
        container.appendChild(checklistEl);

        actionsContainer.innerHTML = `
            <div class="add-item-form">
                <input type="text" id="new-checklist-item" placeholder="Add an item..." class="form-control">
                <button type="button" onclick="addChecklistItem(${checklist.id})" class="btn btn-primary btn-sm">Add Item</button>
            </div>
        `;
    } else {
        actionsContainer.innerHTML = `
            <div class="no-checklist">
                <button type="button" id="create-first-checklist" class="btn btn-primary">Create Checklist</button>
            </div>
        `;
    }
}

function initializeChecklistEventHandlers() {
    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ - –ü–†–ï–î–û–¢–í–†–ê–©–ê–ï–ú –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–£
    document.addEventListener('change', function(e) {
        if (e.target.matches('#checklists-container input[type="checkbox"]')) {
            e.preventDefault();
            e.stopPropagation();
            
            const itemId = e.target.getAttribute('data-item-id');
            const completed = e.target.checked;
            
            if (itemId) {
                console.log('Checkbox changed:', itemId, 'checked:', completed);
                updateChecklistItem(itemId, completed);
            }
        }
    });
    
    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–∞
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-checklist-item')) {
            e.preventDefault();
            e.stopPropagation();
            
            const itemId = e.target.getAttribute('data-item-id');
            if (itemId) {
                deleteChecklistItem(itemId);
            }
        }
        
        if (e.target.classList.contains('delete-checklist')) {
            e.preventDefault();
            e.stopPropagation();
            
            const checklistId = e.target.getAttribute('data-checklist-id');
            if (checklistId) {
                deleteChecklist(checklistId);
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞
    document.addEventListener('click', function(e) {
        if (e.target.id === 'add-checklist-item-btn') {
            e.preventDefault();
            e.stopPropagation();
            
            const checklistId = e.target.getAttribute('data-checklist-id');
            if (checklistId) {
                addChecklistItem(checklistId);
            }
        }
        
        if (e.target.id === 'create-first-checklist') {
            e.preventDefault();
            e.stopPropagation();
            
            const cardId = document.getElementById('card-detail-id').value;
            createFirstChecklist(cardId);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ (Enter) - –ü–†–ï–î–û–¢–í–†–ê–©–ê–ï–ú –û–¢–ü–†–ê–í–ö–£ –§–û–†–ú–´
    document.addEventListener('keypress', function(e) {
        if (e.target.id === 'new-checklist-item' && e.key === 'Enter') {
            e.preventDefault();
            e.stopPropagation();
            
            const checklistId = document.querySelector('#add-checklist-item-btn')?.getAttribute('data-checklist-id');
            if (checklistId) {
                addChecklistItem(checklistId);
            }
        }
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –ø—Ä–∏ –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –≤ —á–µ–∫-–ª–∏—Å—Ç–µ
    const checklistContainer = document.getElementById('checklists-container');
    if (checklistContainer) {
        checklistContainer.addEventListener('submit', function(e) {
            e.preventDefault();
            e.stopPropagation();
        });
        
        checklistContainer.addEventListener('click', function(e) {
            if (e.target.type === 'checkbox' || 
                e.target.classList.contains('remove-checklist-item') ||
                e.target.classList.contains('delete-checklist') ||
                e.target.id === 'add-checklist-item-btn') {
                e.stopPropagation();
            }
        });
    }
}

// –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
function createFirstChecklist(cardId) {
    if (!cardId) {
        alert('Please save the card first');
        return;
    }

    fetch(`/api/cards/${cardId}/checklists`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            title: 'Checklist'
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to create checklist');
        }
        return response.json();
    })
    .then(checklist => {
        // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        loadCardDetails(cardId);
    })
    .catch(error => {
        console.error('Error creating checklist:', error);
        alert('Error creating checklist');
    });
}

// –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –≤ —á–µ–∫-–ª–∏—Å—Ç
function addChecklistItem(checklistId) {
    const input = document.getElementById('new-checklist-item');
    const text = input.value.trim();
    
    if (!text) {
        alert('Please enter item text');
        return;
    }
    
    fetch(`/api/checklists/${checklistId}/items`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            text: text
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to add checklist item');
        }
        return response.json();
    })
    .then(() => {
        input.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const cardId = document.getElementById('card-detail-id').value;
        loadCardDetails(cardId);
    })
    .catch(error => {
        console.error('Error adding checklist item:', error);
        alert('Error adding checklist item: ' + error.message);
    });
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
function updateChecklistItem(itemId, completed) {
    console.log('üîÑ Updating checklist item:', itemId, 'completed:', completed);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ itemId –≤–∞–ª–∏–¥–µ–Ω
    if (!itemId || isNaN(parseInt(itemId))) {
        console.error('‚ùå Invalid itemId:', itemId);
        alert('Invalid checklist item ID');
        return;
    }
    
    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    const itemElement = document.querySelector(`input[data-item-id="${itemId}"]`);
    const checklistItem = itemElement ? itemElement.closest('.checklist-item') : null;
    
    if (checklistItem) {
        if (completed) {
            checklistItem.classList.add('completed');
        } else {
            checklistItem.classList.remove('completed');
        }
    }
    
    fetch(`/api/checklist-items/${itemId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            completed: completed
        })
    })
    .then(response => {
        console.log('üì° Response status:', response.status);
        if (!response.ok) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            return response.text().then(text => {
                throw new Error(`HTTP ${response.status}: ${text}`);
            });
        }
        return response.json();
    })
    .then(data => {
        console.log('‚úÖ Checklist item updated successfully:', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const cardId = document.getElementById('card-detail-id').value;
        updateChecklistProgressBadge(cardId);
        
        showNotification('Checklist item updated');
    })
    .catch(error => {
        console.error('‚ùå Error updating checklist item:', error);
        
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ UI
        if (checklistItem && itemElement) {
            if (completed) {
                checklistItem.classList.remove('completed');
                itemElement.checked = false;
            } else {
                checklistItem.classList.add('completed');
                itemElement.checked = true;
            }
        }
        
        alert('Error updating checklist item: ' + error.message);
    });
}

// –£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞
function deleteChecklistItem(itemId) {
    if (confirm('Are you sure you want to delete this item?')) {
        fetch(`/api/checklist-items/${itemId}`, {
            method: 'DELETE'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to delete checklist item');
            }
            return response.json();
        })
        .then(() => {
            const cardId = document.getElementById('card-detail-id').value;
            loadCardDetails(cardId);
        })
        .catch(error => {
            console.error('Error deleting checklist item:', error);
            alert('Error deleting checklist item');
        });
    }
}

// –£–¥–∞–ª–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç
function deleteChecklist(checklistId) {
    if (confirm('Are you sure you want to delete this checklist and all its items?')) {
        fetch(`/api/checklists/${checklistId}`, {
            method: 'DELETE'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to delete checklist');
            }
            return response.json();
        })
        .then(() => {
            const cardId = document.getElementById('card-detail-id').value;
            loadCardDetails(cardId);
        })
        .catch(error => {
            console.error('Error deleting checklist:', error);
            alert('Error deleting checklist');
        });
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –º–µ—Ç–æ–∫ –∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤
function initializeLabelModal() {
    console.log('üîÑ Initializing label modal...');
    
    const modal = document.getElementById('label-modal');
    if (!modal) {
        console.error('‚ùå Label modal not found!');
        return;
    }
    
    const form = document.getElementById('label-form');
    const cancelBtn = document.getElementById('cancel-label');
    
    if (!form) {
        console.error('‚ùå Label form not found!');
        return;
    }
    
    if (!cancelBtn) {
        console.error('‚ùå Cancel label button not found!');
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    cancelBtn.addEventListener('click', function(e) {
        e.preventDefault();
        console.log('‚ùå Cancel label creation');
        modal.style.display = 'none';
        form.reset();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        console.log('üì® Submitting label form...');
        
        const nameInput = document.getElementById('label-name');
        const colorInput = document.getElementById('label-color');
        
        if (!nameInput || !colorInput) {
            console.error('‚ùå Label form inputs not found!');
            return;
        }
        
        const name = nameInput.value.trim();
        const color = colorInput.value;
        
        console.log('üé® Creating label:', { name, color });
        
        if (!name) {
            alert('Please enter label name');
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏
        fetch('/api/labels', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                name: name,
                color: color
            })
        })
        .then(response => {
            console.log('üì° Response status:', response.status);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(label => {
            console.log('‚úÖ Label created successfully:', label);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modal.style.display = 'none';
            form.reset();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫
            loadUsersAndLabels();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification('Label created successfully!');
        })
        .catch(error => {
            console.error('‚ùå Error creating label:', error);
            alert('Error creating label: ' + error.message);
        });
    });
    
    console.log('‚úÖ Label modal initialized successfully');
}

function loadUsersAndLabels() {
    console.log('üîÑ Loading users and labels...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    fetch('/api/users')
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to load users');
            }
            return response.json();
        })
        .then(users => {
            console.log(`‚úÖ Loaded ${users.length} users`);
            const select = document.getElementById('assignee-select');
            if (select) {
                select.innerHTML = '<option value="">Select user to assign...</option>';
                users.forEach(user => {
                    const option = document.createElement('option');
                    option.value = user.id;
                    option.textContent = user.username;
                    select.appendChild(option);
                });
            }
        })
        .catch(error => {
            console.error('‚ùå Error loading users:', error);
        });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∫–∏
    fetch('/api/labels')
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to load labels');
            }
            return response.json();
        })
        .then(labels => {
            console.log(`‚úÖ Loaded ${labels.length} labels`);
            const select = document.getElementById('label-select');
            if (select) {
                select.innerHTML = '<option value="">Select label...</option>';
                labels.forEach(label => {
                    const option = document.createElement('option');
                    option.value = label.id;
                    option.textContent = label.name;
                    select.appendChild(option);
                });
            }
        })
        .catch(error => {
            console.error('‚ùå Error loading labels:', error);
        });
}

function initializeChecklistModal() {
    console.log('üîÑ Initializing checklist modal...');
    
    const modal = document.getElementById('checklist-modal');
    const form = document.getElementById('checklist-form');
    const cancelBtn = document.getElementById('cancel-checklist');
    
    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    if (!modal || !form || !cancelBtn) {
        console.log('‚ÑπÔ∏è Checklist modal elements not found - skipping initialization');
        return;
    }
    
    cancelBtn.addEventListener('click', function() {
        modal.style.display = 'none';
    });
    
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        const title = document.getElementById('checklist-title').value.trim();
        const cardId = document.getElementById('card-detail-id').value;
        
        if (title && cardId) {
            fetch(`/api/cards/${cardId}/checklists`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    title: title
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to create checklist');
                }
                return response.json();
            })
            .then(checklist => {
                modal.style.display = 'none';
                form.reset();
                loadCardDetails(cardId);
            })
            .catch(error => {
                console.error('Error creating checklist:', error);
                alert('Error creating checklist');
            });
        }
    });
    
    console.log('‚úÖ Checklist modal initialized');
}

// Drag and Drop functionality (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function initializeDragAndDrop() {
    console.log('üöÄ Initializing enhanced drag and drop...');
    
    let draggedCard = null;
    let startList = null;
    let currentDropTarget = null;

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –º–µ—Å—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏
    function createDropIndicator() {
        const indicator = document.createElement('div');
        indicator.className = 'drop-indicator';
        return indicator;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    function showDropIndicator(container, referenceElement) {
        hideDropIndicators();
        
        const indicator = createDropIndicator();
        
        if (referenceElement) {
            container.insertBefore(indicator, referenceElement);
        } else {
            container.appendChild(indicator);
        }
        
        return indicator;
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    function hideDropIndicators() {
        document.querySelectorAll('.drop-indicator').forEach(indicator => {
            indicator.remove();
        });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å
    function getDragAfterElement(container, y) {
        const cards = container.querySelectorAll('.card:not(.dragging)');
        let closestElement = null;
        let closestOffset = Number.NEGATIVE_INFINITY;

        cards.forEach(card => {
            const box = card.getBoundingClientRect();
            const offset = y - box.top - box.height / 2;
            
            if (offset < 0 && offset > closestOffset) {
                closestOffset = offset;
                closestElement = card;
            }
        });

        return closestElement;
    }

    // –î–µ–ª–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–º–∏
    document.addEventListener('dragstart', function(e) {
        const card = e.target.closest('.card');
        if (!card) return;
        
        console.log('üì¶ Drag started:', card.dataset.cardId, 'from list:', card.closest('.list').dataset.listId);
        
        draggedCard = card;
        startList = card.closest('.list');
        currentDropTarget = null;
        
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/plain', card.dataset.cardId);
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        setTimeout(() => {
            card.classList.add('dragging');
        }, 0);
    });

    document.addEventListener('dragend', function(e) {
        if (!draggedCard) return;
        
        console.log('üèÅ Drag ended');
        draggedCard.classList.remove('dragging');
        draggedCard = null;
        startList = null;
        currentDropTarget = null;
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É
        hideDropIndicators();
        document.querySelectorAll('.drag-over').forEach(el => {
            el.classList.remove('drag-over');
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    document.addEventListener('dragover', function(e) {
        e.preventDefault();
        if (!draggedCard) return;
        
        // –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
        let targetList = e.target.closest('.list');
        let targetCardsContainer = e.target.closest('.cards-container');
        
        // –ï—Å–ª–∏ –Ω–∞–≤–µ–ª–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É, –±–µ—Ä–µ–º –µ—ë —Å–ø–∏—Å–æ–∫
        if (!targetList && !targetCardsContainer) {
            const card = e.target.closest('.card');
            if (card) {
                targetList = card.closest('.list');
                targetCardsContainer = targetList.querySelector('.cards-container');
            }
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ü–µ–ª—å –¥–ª—è drop
        if (targetList || targetCardsContainer) {
            if (!targetList && targetCardsContainer) {
                targetList = targetCardsContainer.closest('.list');
            }
            
            e.dataTransfer.dropEffect = 'move';
            list.classList.add('drag-over');
        }
    });

    document.addEventListener('dragleave', function(e) {
        if (!draggedCard) return;
        
        const list = e.target.closest('.list');
        if (list && !list.contains(e.relatedTarget)) {
            list.classList.remove('drag-over');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è
    document.addEventListener('drop', function(e) {
        e.preventDefault();
        if (!draggedCard) return;
        
        const list = e.target.closest('.list');
        if (list && list !== startList) {
            console.log('üéØ Dropped on list:', list.dataset.listId);
            
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            if (targetList && targetList !== currentDropTarget) {
                document.querySelectorAll('.list.drag-over').forEach(list => {
                    list.classList.remove('drag-over');
                });
                targetList.classList.add('drag-over');
                currentDropTarget = targetList;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ
            if (targetCardsContainer) {
                const afterElement = getDragAfterElement(targetCardsContainer, e.clientY);
                showDropIndicator(targetCardsContainer, afterElement);
            }
        }
    });

    document.addEventListener('dragleave', function(e) {
        if (!draggedCard) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –º—ã –≤—ã—à–ª–∏ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
        const relatedTarget = e.relatedTarget;
        const currentTarget = e.currentTarget;
        
        if (!currentTarget.contains(relatedTarget)) {
            const list = e.target.closest('.list');
            if (list) {
                list.classList.remove('drag-over');
                hideDropIndicators();
                currentDropTarget = null;
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è
    document.addEventListener('drop', function(e) {
        e.preventDefault();
        if (!draggedCard) return;
        
        const targetList = e.target.closest('.list');
        const targetCardsContainer = targetList ? targetList.querySelector('.cards-container') : null;
        
        if (targetList && targetCardsContainer) {
            console.log('üéØ Dropped on list:', targetList.dataset.listId);
            
            const cardId = draggedCard.dataset.cardId;
            const newListId = targetList.dataset.listId;
            const dropIndicator = targetCardsContainer.querySelector('.drop-indicator');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            let newPosition = 0;
            const cardsInTargetList = Array.from(targetCardsContainer.querySelectorAll('.card:not(.dragging)'));
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–≥–æ
            if (dropIndicator) {
                const indicatorIndex = Array.from(targetCardsContainer.children).indexOf(dropIndicator);
                if (indicatorIndex > 0) {
                    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–º, —Å–ª–µ–¥—É—é—â–∏–º –∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
                    const nextCard = targetCardsContainer.children[indicatorIndex + 1];
                    if (nextCard && nextCard.classList.contains('card')) {
                        targetCardsContainer.insertBefore(draggedCard, nextCard);
                        newPosition = Array.from(targetCardsContainer.querySelectorAll('.card')).indexOf(draggedCard);
                    } else {
                        // –ò–ª–∏ –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏–π
                        targetCardsContainer.appendChild(draggedCard);
                        newPosition = cardsInTargetList.length;
                    }
                } else {
                    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–≤—ã–π - –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
                    targetCardsContainer.insertBefore(draggedCard, targetCardsContainer.firstChild);
                    newPosition = 0;
                }
            } else {
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–µ—Ç - –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                targetCardsContainer.appendChild(draggedCard);
                newPosition = cardsInTargetList.length;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º listId –∫–∞—Ä—Ç–æ—á–∫–∏
            draggedCard.dataset.listId = newListId;
            
            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É
            hideDropIndicators();
            targetList.classList.remove('drag-over');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            fetch(`/api/cards/${cardId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    list_id: parseInt(newListId),
                    position: newPosition
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('‚úÖ Card moved successfully');
                showNotification('Card moved successfully');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∏ —Ü–µ–ª–µ–≤–æ–º —Å–ø–∏—Å–∫–∞—Ö
                if (startList && startList !== targetList) {
                    updateCardPositions(startList.querySelector('.cards-container'));
                }
                updateCardPositions(targetCardsContainer);
            })
            .catch(error => {
                console.error('‚ùå Error moving card:', error);
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if (startList) {
                    startList.querySelector('.cards-container').appendChild(draggedCard);
                    draggedCard.dataset.listId = startList.dataset.listId;
                    updateCardPositions(startList.querySelector('.cards-container'));
                }
                showNotification('Error moving card', true);
            });
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫
    function updateCardPositions(container) {
        if (!container) return;
        
        const cards = container.querySelectorAll('.card');
        cards.forEach((card, index) => {
            card.dataset.position = index;
        });
    }

    console.log('‚úÖ Enhanced drag and drop initialized');
}

// ==================== –£–î–ê–õ–ï–ù–ò–ï –ö–ê–†–¢–û–ß–ï–ö –ò –°–ü–ò–°–ö–û–í ====================

// ==================== –§–£–ù–ö–¶–ò–ò –£–î–ê–õ–ï–ù–ò–Ø ====================

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
function deleteCard(cardId) {
    console.log('Deleting card:', cardId);
    
    if (confirm('Are you sure you want to delete this card?')) {
        fetch(`/api/cards/${cardId}`, {
            method: 'DELETE'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to delete card');
            }
            return response.json();
        })
        .then(data => {
            console.log('Card deleted successfully');
            const cardElement = document.querySelector(`.card[data-card-id="${cardId}"]`);
            if (cardElement) {
                cardElement.remove();
            }
            showNotification('Card deleted successfully');
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag & drop
            setTimeout(reinitializeDragAndDrop, 100);
        })
        .catch(error => {
            console.error('Error deleting card:', error);
            alert('Error deleting card: ' + error.message);
        });
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
function deleteList(listId) {
    console.log('Deleting list:', listId);
    
    if (confirm('Are you sure you want to delete this list and all its cards?')) {
        fetch(`/api/lists/${listId}`, {
            method: 'DELETE'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to delete list');
            }
            return response.json();
        })
        .then(data => {
            console.log('List deleted successfully');
            // –£–¥–∞–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ DOM
            const listElement = document.querySelector(`.list[data-list-id="${listId}"]`);
            if (listElement) {
                listElement.remove();
            }
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification('List deleted successfully');
        })
        .catch(error => {
            console.error('Error deleting list:', error);
            alert('Error deleting list: ' + error.message);
        });
    }
}

function showNotification(message, isError = false) {
    // Remove existing notifications
    document.querySelectorAll('.notification').forEach(notification => {
        notification.remove();
    });
    
    const notification = document.createElement('div');
    notification.className = `notification ${isError ? 'error' : 'success'}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 3000);
}

// 

// function createFirstChecklist(cardId) {
//     if (!cardId) {
//         alert('Please save the card first');
//         return;
//     }

//     fetch(`/api/cards/${cardId}/checklists`, {
//         method: 'POST',
//         headers: {
//             'Content-Type': 'application/json',
//         },
//         body: JSON.stringify({
//             title: 'Checklist'
//         })
//     })
//     .then(response => {
//         if (!response.ok) {
//             throw new Error('Failed to create checklist');
//         }
//         return response.json();
//     })
//     .then(checklist => {
//         // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
//         loadCardDetails(cardId);
//     })
//     .catch(error => {
//         console.error('Error creating checklist:', error);
//         alert('Error creating checklist');
//     });
// }

// // –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –≤ —á–µ–∫-–ª–∏—Å—Ç
// function addChecklistItem(checklistId) {
//     const input = document.getElementById('new-checklist-item');
//     const text = input.value.trim();
    
//     if (!text) {
//         alert('Please enter item text');
//         return;
//     }
    
//     fetch(`/api/checklists/${checklistId}/items`, {
//         method: 'POST',
//         headers: {
//             'Content-Type': 'application/json',
//         },
//         body: JSON.stringify({
//             text: text,
//             position: 0
//         })
//     })
//     .then(response => {
//         if (!response.ok) {
//             throw new Error('Failed to add checklist item');
//         }
//         return response.json();
//     })
//     .then(() => {
//         input.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
//         const cardId = document.getElementById('card-detail-id').value;
//         loadCardDetails(cardId);
//     })
//     .catch(error => {
//         console.error('Error adding checklist item:', error);
//         alert('Error adding checklist item: ' + error.message);
//     });
// }

// // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
// function updateChecklistItem(itemId, completed) {
//     console.log('Updating checklist item:', itemId, 'completed:', completed);
    
//     // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI - —Å—Ä–∞–∑—É –º–µ–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
//     const itemElement = document.querySelector(`[data-item-id="${itemId}"]`);
//     const checklistItem = itemElement ? itemElement.closest('.checklist-item') : null;
    
//     if (checklistItem) {
//         if (completed) {
//             checklistItem.classList.add('completed');
//         } else {
//             checklistItem.classList.remove('completed');
//         }
//     }
    
//     fetch(`/api/checklist-items/${itemId}`, {
//         method: 'PUT',
//         headers: {
//             'Content-Type': 'application/json',
//         },
//         body: JSON.stringify({
//             completed: completed
//         })
//     })
//     .then(response => {
//         if (!response.ok) {
//             throw new Error('Failed to update checklist item');
//         }
//         return response.json();
//     })
//     .then(() => {
//         console.log('Checklist item updated successfully');
        
//         // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ, –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—è –≤—Å—é –∫–∞—Ä—Ç–æ—á–∫—É
//         const cardId = document.getElementById('card-detail-id').value;
//         updateChecklistProgressBadge(cardId);
        
//         showNotification('Checklist item updated');
//     })
//     .catch(error => {
//         console.error('Error updating checklist item:', error);
        
//         // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ UI –ø—Ä–∏ –æ—à–∏–±–∫–µ
//         if (checklistItem) {
//             if (completed) {
//                 checklistItem.classList.remove('completed');
//                 itemElement.checked = false;
//             } else {
//                 checklistItem.classList.add('completed');
//                 itemElement.checked = true;
//             }
//         }
//         alert('Error updating checklist item');
//     });
// }

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –±–µ–π–¥–∂–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
function updateChecklistProgressBadge(cardId) {
    if (!cardId) return;
    
    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
    const cardElement = document.querySelector(`.card[data-card-id="${cardId}"]`);
    if (!cardElement) return;
    
    // –ù–∞—Ö–æ–¥–∏–º –±–µ–π–¥–∂ —á–µ–∫-–ª–∏—Å—Ç–∞
    const checklistBadge = cardElement.querySelector('.badge.checklist');
    if (!checklistBadge) return;
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const checklistsContainer = document.getElementById('checklists-container');
    const allItems = checklistsContainer.querySelectorAll('.checklist-item');
    const completedItems = checklistsContainer.querySelectorAll('.checklist-item.completed');
    
    checklistBadge.innerHTML = `‚úÖ ${completedItems.length}/${allItems.length}`;
}

// // –£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞
// function deleteChecklistItem(itemId) {
//     if (confirm('Are you sure you want to delete this item?')) {
//         fetch(`/api/checklist-items/${itemId}`, {
//             method: 'DELETE'
//         })
//         .then(response => {
//             if (!response.ok) {
//                 throw new Error('Failed to delete checklist item');
//             }
//             return response.json();
//         })
//         .then(() => {
//             const cardId = document.getElementById('card-detail-id').value;
//             loadCardDetails(cardId);
//         })
//         .catch(error => {
//             console.error('Error deleting checklist item:', error);
//             alert('Error deleting checklist item');
//         });
//     }
// }

// // –£–¥–∞–ª–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç
// function deleteChecklist(checklistId) {
//     if (confirm('Are you sure you want to delete this checklist and all its items?')) {
//         fetch(`/api/checklists/${checklistId}`, {
//             method: 'DELETE'
//         })
//         .then(response => {
//             if (!response.ok) {
//                 throw new Error('Failed to delete checklist');
//             }
//             return response.json();
//         })
//         .then(() => {
//             const cardId = document.getElementById('card-detail-id').value;
//             loadCardDetails(cardId);
//         })
//         .catch(error => {
//             console.error('Error deleting checklist:', error);
//             alert('Error deleting checklist');
//         });
//     }
// }

// // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –º–µ—Ç–æ–∫ –∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤
// function initializeLabelModal() {
//     const modal = document.getElementById('label-modal');
//     const form = document.getElementById('label-form');
//     const cancelBtn = document.getElementById('cancel-label');
    
//     cancelBtn.addEventListener('click', function() {
//         modal.style.display = 'none';
//     });
    
//     form.addEventListener('submit', function(e) {
//         e.preventDefault();
//         const name = document.getElementById('label-name').value.trim();
//         const color = document.getElementById('label-color').value;
        
//         if (name) {
//             fetch('/api/labels', {
//                 method: 'POST',
//                 headers: {
//                     'Content-Type': 'application/json',
//                 },
//                 body: JSON.stringify({
//                     name: name,
//                     color: color
//                 })
//             })
//             .then(response => {
//                 if (!response.ok) {
//                     throw new Error('Failed to create label');
//                 }
//                 return response.json();
//             })
//             .then(label => {
//                 modal.style.display = 'none';
//                 form.reset();
//                 // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫
//                 loadUsersAndLabels();
//             })
//             .catch(error => {
//                 console.error('Error creating label:', error);
//                 alert('Error creating label');
//             });
//         }
//     });
// }

// function initializeChecklistModal() {
//     const modal = document.getElementById('checklist-modal');
//     const form = document.getElementById('checklist-form');
//     const cancelBtn = document.getElementById('cancel-checklist');
    
//     cancelBtn.addEventListener('click', function() {
//         modal.style.display = 'none';
//     });
    
//     form.addEventListener('submit', function(e) {
//         e.preventDefault();
//         const title = document.getElementById('checklist-title').value.trim();
//         const cardId = document.getElementById('card-detail-id').value;
        
//         if (title && cardId) {
//             fetch(`/api/cards/${cardId}/checklists`, {
//                 method: 'POST',
//                 headers: {
//                     'Content-Type': 'application/json',
//                 },
//                 body: JSON.stringify({
//                     title: title
//                 })
//             })
//             .then(response => {
//                 if (!response.ok) {
//                     throw new Error('Failed to create checklist');
//                 }
//                 return response.json();
//             })
//             .then(checklist => {
//                 modal.style.display = 'none';
//                 form.reset();
//                 loadCardDetails(cardId);
//             })
//             .catch(error => {
//                 console.error('Error creating checklist:', error);
//                 alert('Error creating checklist');
//             });
//         }
//     });
// }
